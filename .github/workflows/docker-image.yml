name: Docker Image

on:
  workflow_call:
    inputs:
      dockerfile_path:
        description: "Dockerfile path"
        type: string
        required: false
        default: "Dockerfile"


      download_artifact:
        description: "Download artifact?"
        type: boolean
        required: false
        default: false

      download_artifact_name:
        description: "Artifact name to download"
        type: string
        required: false

      download_artifact_path:
        description: "Downloaded artifact path"
        type: string
        required: false


      image_name:
        description: "Image name"
        type: string
        required: true
      image_version:
        description: "Image version"
        type: string
        required: true

      image_artifact_name:
        description: "Image artifact name"
        type: string
        required: false
        default: image


      publish_image:
        description: "Publish image?"
        type: boolean
        required: false
        default: false

      publish_image_registry:
        description: "Docker registry to publish image"
        type: string
        required: false
    secrets:
      publish_image_registry_token:
        description: "Docker registry token to publish image"
        required: false

jobs:
  build-image:
    name: Build image
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Validate Download Artifact inputs
        if: ${{ inputs.download_artifact }}
        run: |
          if [ -z "${{ inputs.download_artifact_name }}" ] || [ -z "${{ inputs.download_artifact_path }}" ]; then
            echo "Error: download_artifact_name and download_artifact_path inputs are required on enabled download_artifact input."
            exit 1
          fi  

      - uses: actions/checkout@v4
        name: Checkout

      - uses: actions/download-artifact@v4
        name: Download artifact
        if: ${{ inputs.download_artifact }}
        with:
          name: ${{ inputs.download_artifact_name }}
          path: ${{ inputs.download_artifact_path }}

      - name: Prepare Build Image
        run: |
          IMAGE_NAME=${{ inputs.image_name }}
          echo "Image Name: $IMAGE_NAME"
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          
          IMAGE_VERSION=${{ inputs.image_version }}
          echo "Image Version: $IMAGE_VERSION"
          echo "IMAGE_VERSION=$IMAGE_VERSION" >> $GITHUB_ENV
          
          IMAGE_TAG=$IMAGE_NAME:$IMAGE_VERSION
          echo "Image Tag: $IMAGE_VERSION"
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          
          echo "GitHub run ID: $GITHUB_RUN_ID"

      - name: Build image
        run: docker build . --file Dockerfile --tag $IMAGE_TAG --label "github_actions_run=$GITHUB_RUN_ID"

      - name: Save image
        run: docker save $IMAGE_TAG > image.tar

      - uses: actions/upload-artifact@v4
        name: Upload build artifacts
        with:
          name: ${{ inputs.image_artifact_name }}
          path: image.tar

  publish-image:
    name: Publish image
    runs-on: ubuntu-latest

    needs: build-image
    if: ${{ inputs.publish_image }}

    permissions:
      contents: read
      packages: write

    steps:
      - name: Validate Publish Image inputs
        run: |
          if [ -z "${{ inputs.publish_image_registry }}" ]; then
            echo "Error: publish_image_registry input is required on enabled publish_image input."
            exit 1
          fi

      - uses: actions/download-artifact@v4
        name: Download build artifacts
        with:
          name: ${{ inputs.image_artifact_name }}
          path: .

      - name: Load image
        run: |
          ORIGINAL_IMAGE_TAG=$(docker load -i image.tar | sed -n 's/^Loaded image: //p')
          echo "Original Image Tag: $ORIGINAL_IMAGE_TAG"
          echo "ORIGINAL_IMAGE_TAG=$ORIGINAL_IMAGE_TAG" >> $GITHUB_ENV

      - name: Prepare Publish Image
        run: |
          DOCKER_REGISTRY=${{ inputs.publish_image_registry }}
          echo "Docker Registry: $DOCKER_REGISTRY"
          echo "DOCKER_REGISTRY=$DOCKER_REGISTRY" >> $GITHUB_ENV
          
          IMAGE_TAG="$DOCKER_REGISTRY/$ORIGINAL_IMAGE_TAG"
          IMAGE_TAG=$(echo $IMAGE_TAG | tr '[A-Z]' '[a-z]')
          echo "Image Tag: $IMAGE_TAG"
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Log in to registry
        run: |
          REGISTRY_TOKEN=${{ secrets.publish_image_registry_token }}
          if [ -n "$REGISTRY_TOKEN" ]; then
            echo "Docker Registry token is provided, trying to log in"
            echo "$REGISTRY_TOKEN" | docker login $DOCKER_REGISTRY -u nologin --password-stdin
          else
            echo "Docker Registry token is not provided, logging in is not needed"
          fi

      - name: Publish image
        run: |
          docker tag $ORIGINAL_IMAGE_TAG $IMAGE_TAG
          docker push $IMAGE_TAG